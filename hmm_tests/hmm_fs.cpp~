//
//  hmm_fs.cpp
//  hmm_tests
//
//  Created by Adam Willats on 8/16/17.
//  Copyright Â© 2017 Adam Willats. All rights reserved.
//

/**
 * Feder1co 5oave
 */


#include "hmm_fs.hpp"
//#include "../../../module_help/StAC_rtxi/hmm_tests/hmm_fs.hpp"


std::vector<int> getStates(HMM const& hmm){
}

int* viterbi(HMM const& hmm, const int observed[], const int n) {
    assert(n > 0); assert(observed != NULL);
    int *seq = new int[n];

    for (int i = 0; i < n; i++) seq[i] = 0;
    double **prob = new double*[n];
    int **prevs = new int*[n];
    for (int i = 0; i < n; i++) {
        prob[i] = new double[hmm.states];
        prevs[i] = new int[hmm.states];
        for (int j = 0; j < hmm.states; j++) { //unnecessary
            prob[i][j] = 0;
            prevs[i][j] = 0;
        }
    }
    
    for (int i = 0; i < hmm.states; i++) {
        prob[0][i] = hmm.PI[i] * hmm.B[i][ observed[0] ];
    }
    for (int i = 1; i < n; i++) {
        for (int j = 0; j < hmm.states; j++) {
            double pmax = 0, p; int dmax;
            for (int k = 0; k < hmm.states; k++) {
                p = prob[i-1][k] * hmm.A[k][j];
                if (p > pmax) {
                    pmax = p;
                    dmax = k;
                }
            }
            prob[i][j] = hmm.B[j][ observed[i] ] * pmax;
            prevs[i-1][j] = dmax;
        }
    }
    
    double pmax = 0; int dmax;
    for (int i = 0; i < hmm.states; i++) {
        if (prob[n-1][i] > pmax) {
            pmax = prob[n-1][i];
            dmax = i;
        }
    }
    seq[n-1] = dmax;
    
    for (int i = n-2; i >= 0; i--) {
        seq[i] = prevs[i][ seq[i+1] ];
    }
    

    //////////////////////////////////////////////////////////check
    for (int i = 0; i < n; i++) {
        ////cout << "t = " << i << endl;
        for (int j = 0; j < hmm.states; j++) {
            ////cout << '[' << j << ']' << prob[i][j] << ' ';
        }
        //cout << "\n\n";
    }
    
    for (int i = 0; i < n; i++) {
        ////cout << "t = " << i << endl;
        for (int j = 0; j < hmm.states; j++) {
            ////cout << '[' << j << ']' << prevs[i][j] << ' ';
        }
        ////cout << "\n\n";
    }
    
    ////cout << endl;

    ////cout << endl;
    //////////////////////////////////////////////////////////
        
    
    for (int i = 0; i < n; i++) {
        delete[] prob[i];
        delete[] prevs[i];
    }
    delete[] prob;
    delete[] prevs;
    
    return seq;
}


/*
void easyBuild(void)
{

//std::vector<double> vFr_, std::vector<double> vTr_, int nstates, int nemits)

    std::vector<double> vFr = {0.1, 0.6};
    
    std::vector<double> vTr = {0.1, 0.1};
    double A0[2] = {1-vTr[0], vTr[0]};
    double A1[2] = {vTr[1], 1-vTr[1]};
    double *A[2] = {A0, A1};
    
    double B0[2] = {1-vFr[0], vFr[0]};
    double B1[2] = {1-vFr[1], vFr[1]};
    double *B[2] = {B0, B1};

    //ideally this would be the transition probabilities...?
    double PI[2] = {.5,.5};

    //HMM easy_hmm(2,2, A,B,PI);
    //HMM easy_hmm(10);
    //return easy_hmm;

}
*/






























